# -*- coding: utf-8 -*-
"""Class for generating problem instances (in this case, weighted bipartite graphs).

Contains the InstanceGenerator class, which creates problem instances for uniform cardinal valuations under unit-sum and unit-range normalizations, in addition to risk-averse,
risk-neutral, and risk-loving utility functions. ALso logs all problem instances created by InstanceGenerator.

"""

import networkx as nx
import numpy as np
import pandas as pd

class InstanceGenerator:
    """Object that generates problem instances for the simulation."""

    def __init__(self, logging=False):
        """Initializes a new InstanceGenerator.
        
        Args:
            logging: Whether or not all instances generated by this InstanceGenerator should be stored.
        """
        self.logging = logging
        self.history = {}
        self.index = 0

    def matrix_to_graph(self, M):
        """Helper method that transforms a square matrix into a weighted bipartite graph.
        
        Args:
            M: two-dimensional square numpy array, where rows represent agent preferences over goods, of size n.

        Returns:
            Weighted bipartite Graph, with nodes 1 through n representing agents.    
        """
        n=M.shape[0]
        G = nx.Graph()
        G.add_nodes_from(list(range(1, 2*n+1)))

        goods_array = np.array(list(range(n+1, 2*n+1)))

        for i in range(n):
            agent_array = np.array([i+1]*n)
            value_array = M[i]
            weight_data = np.array(agent_array, goods_array, value_array).T
            weight_data = zip(weight_data)
            G.add_weighted_edges_from(weight_data)

        return G
            
